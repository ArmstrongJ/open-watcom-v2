/*
 *  pthread.h   POSIX threads interface
 *
:include crwat.sp
 */
#ifndef _PTHREAD_H_INCLUDED
#define _PTHREAD_H_INCLUDED

:include readonly.sp

:include owrtlink.sp

:include cpluspro.sp

:include systypes.sp

:include lnxkpack.sp

#define PTHREAD_CANCEL_DISABLE      0
#define PTHREAD_CANCEL_ENABLE       1
#define PTHREAD_CANCEL_DEFERRED     2
#define PTHREAD_CANCEL_ASYNCHRONOUS 4

/* Creation/destruction */
_WCRTLINK extern int  pthread_create( pthread_t *__thread, const pthread_attr_t *__attr, void *(*__start_routine)(void*), void *__arg );
_WCRTLINK extern void pthread_exit( void *__exit_val );

/* Mutexes */
_WCRTLINK extern int pthread_mutex_init(pthread_mutex_t *__mutex, const pthread_mutexattr_t *__attr);
_WCRTLINK extern int pthread_mutex_destroy(pthread_mutex_t *__mutex);
_WCRTLINK extern int pthread_mutex_trylock(pthread_mutex_t *__mutex);
_WCRTLINK extern int pthread_mutex_lock(pthread_mutex_t *__mutex);
_WCRTLINK extern int pthread_mutex_unlock(pthread_mutex_t *__mutex);

/* Thread joining */
_WCRTLINK extern int pthread_join( pthread_t __thread, void **__value_ptr );

/* Cancellation */
_WCRTLINK extern int pthread_cancel( pthread_t __thread );
_WCRTLINK extern int pthread_setcancelstate( int __state, int *__oldstate );
_WCRTLINK extern int pthread_setcanceltype( int __type, int *__oldtype );
_WCRTLINK extern void pthread_testcancel( );

/* Equality */
_WCRTLINK extern int pthread_equal( pthread_t __pt1, pthread_t __pt2 );

/* Conditions */
_WCRTLINK extern int pthread_cond_init( pthread_cond_t *__cond, const pthread_condattr_t *__attr );
_WCRTLINK extern int pthread_cond_destroy( pthread_cond_t *__cond );
_WCRTLINK extern int pthread_cond_signal( pthread_cond_t *__cond );
_WCRTLINK extern int pthread_cond_broadcast( pthread_cond_t *__cond );
_WCRTLINK extern int pthread_cond_wait( pthread_cond_t *__cond, pthread_mutex_t *__mutex );
_WCRTLINK extern int pthread_cond_timedwait( pthread_cond_t *__cond, pthread_mutex_t *__mutex, const struct timespec *abstime );

/* Thread-specific keys */
_WCRTLINK extern int pthread_key_create( pthread_key_t *__key, void (*__destructor)(void*) );
_WCRTLINK extern int pthread_key_delete(pthread_key_t __key);
_WCRTLINK extern int pthread_setspecific(pthread_key_t __key, void *__value);
_WCRTLINK extern void *pthread_getspecific(pthread_key_t __key);

/* Read-Write locks */
_WCRTLINK extern int pthread_rwlock_init( pthread_rwlock_t *__rwlock, const pthread_rwlockattr_t *__attr );
_WCRTLINK extern int pthread_rwlock_destroy( pthread_rwlock_t *__rwlock );
_WCRTLINK extern int pthread_rwlock_unlock( pthread_rwlock_t *__rwlock );
_WCRTLINK extern int pthread_rwlock_tryrdlock( pthread_rwlock_t *__rwlock );
_WCRTLINK extern int pthread_rwlock_rdlock( pthread_rwlock_t *__rwlock );
_WCRTLINK extern int pthread_rwlock_trywrlock( pthread_rwlock_t *__rwlock );
_WCRTLINK extern int pthread_rwlock_wrlock( pthread_rwlock_t *__rwlock );

/* Barriers */
_WCRTLINK extern int pthread_barrier_init( pthread_barrier_t *__barrier,
                                           const pthread_barrierattr_t *__attr, 
                                           unsigned __count );
_WCRTLINK extern int pthread_barrier_destroy( pthread_barrier_t *__barrier );
_WCRTLINK extern int pthread_barrier_wait( pthread_barrier_t *__barrier );

:segment LINUX
/* Spin locks (Linux only due to use of atomic ops) */
_WCRTLINK extern int pthread_spin_init(pthread_spinlock_t *__lock, int __ignored_pshared);
_WCRTLINK extern int pthread_spin_destroy(pthread_spinlock_t *__lock);
_WCRTLINK extern int pthread_spin_lock(pthread_spinlock_t *__lock);
_WCRTLINK extern int pthread_spin_trylock(pthread_spinlock_t *__lock);
_WCRTLINK extern int pthread_spin_unlock(pthread_spinlock_t *__lock);
:endsegment

:include poppack.sp

:include cplusepi.sp

#endif /* !_PTHREAD_H_INCLUDED */
